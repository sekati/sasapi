<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************************
		FDTKit Buildfile v1.1.0
		
		@note	You must run this Buildfile in the same JRE as the workspace, be sure to
				check this option in the launch configuration.
				
		@setup	This Buildfile is currently scoped for OSX,Eclipse,Subclipse,FDT. If you
				you would like to use it on Windows simply install Cygwin and adjust the 
				necessary path properties.
		
		@see	http://www.dopelogik.com/documents/actionscript_ant/
			     
		May 22, 2007 - jason m horwitz | Sekati LLC | sekati.com
     ************************************************************************************* -->

<project name="SASAPI - Sekati ActionScript API" default="usage" basedir=".">

	<!-- PROPERTIES: fdtkit -->
	<property name="fdtkit" location="/Users/jason/workspace/fdtkit"/>
	<property name="project_template" location="${fdtkit}/lib/templates/project"/>
    <property name="mtasc" location="${fdtkit}/bin/mtasc/mtasc"/>
	<property name="as2api" location="${fdtkit}/bin/as2api/as2api_darwin"/>
	<property name="dot_exe" location="${fdtkit}/bin/graphviz/Graphviz.app/Contents/MacOS/dot"/>
	<property name="corelib" location="${fdtkit}/lib/FP8"/>
	<property name="sloccount" location="${basedir}/lib/tools/slocCount.sh"/>
	
	<!-- PROPERTIES: project structure template -->
	<property name="deploy" location="${basedir}/deploy"/>
	<property name="docs" location="${basedir}/docs"/>
	<property name="lib" location="${basedir}/lib"/>
	<property name="src" location="${basedir}/src"/>
	<property name="tests" location="${basedir}/tests"/>
	<property name="archive" location="${deploy}/_archive"/>
	
	<!-- PROPERTIES: project specific -->
	<property name="classpath" location="${src}/"/>
	<property name="package" value="com.*"/>
	<property name="target_fla" location="${src}/framework.fla"/>
    <property name="target_swf" value="${deploy}framework.swf"/>
    <property name="main_class" value="${src}/com/sekati/core/Document.as"/>
	<property name="width" value="800"/>
	<property name="height" value="600"/>
	<property name="fps" value="31"/>
	<property name="bgcolor" value="000000"/>

	<!-- PROPERTIES: deployment server settings 
	@Note: Always use trailing slashes on paths.
	@Note: You must have your ssh key installed on the
			target server to automate deployment.
	-->
	<property name="deploy_dest_user" value="jason"/>
	<property name="deploy_dest_host" value="sekati.com"/>
	<property name="deploy_excludes" value=".svn"/>
	<property name="rsync" location="/usr/bin/rsync"/>
	<property name="ssh" location="/usr/bin/rsync"/>	
	
	<!-- project deployment paths -->
	<property name="deploy_source_path" location="${basedir}/"/>
	<property name="deploy_dest_path" value="/home/www/dev/"/>	
	
	<!-- doc deployment paths -->
	<property name="deploy_source_docpath" location="${docs}/"/>
	<property name="deploy_dest_docpath" value="/home/www/dev/sasapi/"/>
	
	
	<!-- TASK: usage :give overview of available tasks -->
	<target name="usage">
		<echo message=""/>
		<echo message="----------------------"/>
		<echo message="Available Ant targets:"/>
		<echo message="sloc_count"/>
		<echo message="doc_batch"/>
		<echo message="doc_clean"/>
		<echo message="doc_build"/>
		<echo message="doc_deploy"/>
		<echo message="project_batch"/>
		<echo message="project_create"/>
		<echo message="project_deploy"/>
		<echo message="compile_mtasc"/>
		<echo message="compile_ide"/>
		<echo message="compile_all_ide"/>
		<echo message="launch_external"/>
		<echo message="launch_fdt"/>
		<!--
		<echo message="svn_commit"/>
		<echo message="svn_set_ignores"/>
		-->
		<echo message="backup_swf"/>
		<echo message="usage"/>
		<echo message="----------------------"/>
		<echo message=""/>
	</target>		

	<!-- TASK: doc_batch :compile a batch of tasks to execute -->
    <target name="doc_batch">
        <antcall target="sloc_count"/>
        <antcall target="doc_build"/>
        <antcall target="doc_deploy"/>
    </target>	
	
	<!-- TASK: doc_clean :remove all old documentation files -->	
	<target name="doc_clean">
		<defaultexcludes echo="true"/>
		<delete includeemptydirs="true">
			<fileset dir="${docs}" includes="**/*" excludes="**/.svn"/>
		</delete>	
	</target>
	
	<!-- TASK: doc_build :run as2api to build documentation -->	
	<target name="doc_build">
		<exec executable="${as2api}" failonerror="true">
			<arg line='package-spec ${package}'/>
			<arg line='--classpath ${src}'/>
			<arg line='--output-dir ${docs}'/>
			<arg line='--title ${ant.project.name}'/>
			<arg line='--sources'/>
			<arg line='--progress'/>
        	<arg line='--draw-diagram'/>
        	<arg line='--dot-exe ${dot_exe}'/>
		</exec>
		<copy file="${docs}/frameset.html" tofile="${docs}/index.html" overwrite="true"  failonerror="true"/>
		<copy file="${lib}/tools/doc_sekati_style.css" tofile="${docs}/style.css" overwrite="true"  failonerror="true"/>
		<copy file="${lib}/tools/doc_sekati_unnatural.css" tofile="${docs}/unnatural.css" overwrite="true"  failonerror="true"/>
	</target>
	
	<!-- TASK: doc_deploy :rsync+ssh documentation to target server -->
	<target name="doc_deploy">
		<exec executable="${rsync}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy_excludes}"/>
			<arg value="${deploy_source_docpath}"/>
			<arg value="${deploy_dest_user}@${deploy_dest_host}:${deploy_dest_docpath}"/>
		</exec>
	</target>
	
	<!-- TASK: sloc_count :count source lines of code -->
	<target name="sloc_count">
		<exec executable="${sloccount}">
		</exec>
	</target>	

	<!-- TASK: project_batch :compile a batch of tasks to execute -->
    <target name="project_batch">
        <antcall target="sloc_count"/>
        <antcall target="doc_build"/>
        <antcall target="project_deploy"/>
    </target>	
	
	<!-- TASK: project_deploy :rsync+ssh documentation to target server -->
	<target name="project_deploy">
		<exec executable="${rsync}">
			<arg value="-ave ssh"/>
			<arg value="--delete"/>
			<arg value="--force"/>
			<arg value="--progress"/>
			<arg value="--exclude=${deploy_excludes}"/>
			<arg value="${deploy_source_path}"/>
			<arg value="${deploy_dest_user}@${deploy_dest_host}:${deploy_dest_path}"/>
		</exec>
	</target>	
	
	<!-- TASK: svn_commit :commit project base to repository, see: http://subclipse.tigris.org/svnant/svn.html
	<target name="svn_commit">
		<svn javahl="true">
			<commit message="Buildfile automated Ant Task commit." dir="${basedir}"/>
		</svn>
	</target>
	 -->
	
	<!-- TASK: svn_set_ignores :set the base ignores we never want to commit
	<target name="svn_set_ignores">
		<ignore dir="${basedir}" pattern=".DS_Store" recurse="true"/>
		<ignore dir="${basedir}" pattern="Thumbs.db" recurse="true"/>
		<ignore dir="${basedir}" pattern="*.TMP" recurse="true"/>
		<ignore dir="${basedir}" pattern="*.tmp" recurse="true"/>
		<ignore dir="${basedir}" pattern="*.BAK" recurse="true"/>
		<ignore dir="${basedir}" pattern="*.bak" recurse="true"/>
		<ignore dir="${basedir}" pattern="_archive/*" recurse="true"/>
	</target>
	-->
	
	<!-- TASK: project_create :create directory structure for a new project -->
	<target name="project_create">
		<!-- create root struct -->
		<mkdir dir="${deploy}"/>
		<mkdir dir="${docs}"/>
		<mkdir dir="${lib}"/>
		<mkdir dir="${src}"/>
		<mkdir dir="${tests}"/>
		<!-- create deploy struct -->
		<mkdir dir="${deploy}/_archive"/>
		<mkdir dir="${deploy}/assets"/>
		<mkdir dir="${deploy}/css"/>
		<mkdir dir="${deploy}/js"/>
		<mkdir dir="${deploy}/php"/>
		<!-- create lib struct -->
		<mkdir dir="${lib}/comps"/>
		<mkdir dir="${lib}/fonts"/>
		<mkdir dir="${lib}/misc"/>
		<mkdir dir="${lib}/tools"/>
		<!-- copy project template assets -->
		<copy todir="${build}">
			<fileset dir="${project_template}/build"/>
		</copy>
	</target>	

	<!-- TASK: compile_mtasc :compile target fla in src dir with mtasc -->
    <target name="compile_mtasc">
        <exec executable="${mtasc}" dir="." failonerror="true">
            <arg line="-cp ${corelib}"/>
            <arg line="-cp ${classpath}"/>
            <arg line="-v -version 8 -mx -swf"/>
            <arg line="${target_swf} ${main_class}"/>
        </exec>
    </target>	

	<!-- TASK: compile_ide :compile target fla in src dir with Flash IDE -->		
	<target name="compile_ide">
	    <fdt.flashCompile>
	        <fileset dir="${src}">
	            <include name="${target_fla}"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>
	
	<!-- TASK: compile_all_ide :compile all fla's in src dir with Flash IDE -->	
	<target name="compile_all_ide">
	    <fdt.flashCompile>
	        <fileset dir="${src}">
	        	 <include name="*.fla"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>
	
	<!-- TASK: launch_external :launch target swf in FlashPlayer -->	
    <target name="launch_external">
    	<fdt.extSWFViewer.startSWF file="${target_swf}" width="${movie.width}" height="${movie.height}" flashvars="${movie.flashvars}"/>
    </target>
    		
	<!-- TASK: launch_fdt :launch target swf in FDT viewer -->			
    <target name="launch_fdt">
    	<fdt.viewDocument location="${target_swf}"/>
    </target>
	
	<!-- TASK: backup_swf :use buildnumber to backup swf file -->	
	<target name="backup_swf">
	<!-- Make backups dir if needed -->
	    <mkdir dir="${archive}"/>
	<!-- Increment build number -->
	    <buildnumber file="${archive}\build.number"/>
	<!-- Get swf file name without swf extension and store it in the base_name property -->
	    <basename file="${target_swf}" property="base_name" suffix=".swf"/>
	<!-- Copy swf to backups dir with build number -->
	    <copy file="${target_swf}" tofile="${archive}\${base_name}.${build.number}.swf" overwrite="false"  failonerror="true"/>
	</target>
	
</project>