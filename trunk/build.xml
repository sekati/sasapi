<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************************
		FDTKit Buildfile Example Template
		
		note: You have to run the script in the "same JRE as the workspace". 
		Check this option in the launch configuration. 
		ref: http://www.dopelogik.com/documents/actionscript_ant/
			     
		May 22, 2007 - jason m horwitz | Sekati LLC | sekati.com
     ************************************************************************************* -->

<project name="SASAPI - Sekati ActionScript API" default="usage" basedir=".">
	<!-- fdtkit properties -->
	<property name="fdtkit" location="/Users/jason/workspace/fdtkit"/>
	<property name="project_template" location="${fdtkit}/lib/templates/project"/>
    <property name="mtasc" location="${fdtkit}/bin/mtasc/mtasc"/>
	<property name="as2api" location="${fdtkit}/bin/as2api/as2api_darwin"/>
	<property name="dot_exe" location="${fdtkit}/bin/graphviz/Graphviz.app/Contents/MacOS/dot"/>
	<property name="corelib" location="${fdtkit}/lib/FP8"/>
	
	<!-- project folder structure template -->
	<property name="build" location="${basedir}/build"/>
	<property name="deploy" location="${basedir}/deploy"/>
	<property name="docs" location="${basedir}/docs"/>
	<property name="lib" location="${basedir}/lib"/>
	<property name="src" location="${basedir}/src"/>
	<property name="tests" location="${basedir}/tests"/>
	
	<!-- project specific properties -->
	<property name="classpath" location="${src}/"/>
	<property name="package" value="com.*"/>
	<property name="target_fla" location="${src}/framework.fla"/>
    <property name="target_swf" value="${deploy}framework.swf"/>
    <property name="main_class" value="${src}/com/sekati/core/Document.as"/>
	<property name="width" value="800"/>
	<property name="height" value="600"/>
	<property name="fps" value="31"/>
	<property name="bgcolor" value="000000"/>		

	<!-- target: create_project :create directory structure for a new project -->
	<target name="create_project">
		<!-- create root struct -->
		<mkdir dir="${deploy}"/>
		<mkdir dir="${docs}"/>
		<mkdir dir="${lib}"/>
		<mkdir dir="${src}"/>
		<mkdir dir="${tests}"/>
		<mkdir dir="${build}"/>
		<!-- create build struct -->
		<!-- copy project template assets -->
		<copy todir="${build}">
			<fileset dir="${project_template}/build"/>
		</copy>
	</target>
	
	<!-- target: usage :give overview of available tasks -->
	<target name="usage">
		<echo message=""/>
		<echo message="----------------------"/>
		<echo message="Available Ant targets:"/>
		<echo message="clean_documentation"/>
		<echo message="build_documentation"/>
		<echo message="test_movie"/>
		<echo message="compile_mtasc"/>
		<echo message="compile_ide"/>
		<echo message="compile_all_ide"/>
		<echo message="launch_fdt"/>
		<echo message="launch_external"/>
		<echo message="copy_to_dev"/>
		<echo message="backup_swf"/>
		<echo message="----------------------"/>
		<echo message=""/>
	</target>	
	
	<!-- target: batch :compile a batch of tasks to execute -->
    <target name="batch">
        <!--
        <antcall target="clean_docs"/>
        <antcall target="build_docs"/>
        <antcall target="compile_mtasc"/> 
    	<antcall target="compile_ide"/>
    	<antcall target="compile_all_ide"/>
    	<antcall target="copy_to_dev"/>
    	<antcall target="backup_swf"/>
    	<antcall target="launch"/>
    	--> 
    </target>
  
	<!-- target: build_docs :run as2api to build documentation -->	
	<target name="build_docs">
		<!-- 
		<antcall target="clean_docs"/> 
		<mkdir dir="${doc}"/>
		-->
		<exec executable="${as2api}" failonerror="true">
			<arg line='package-spec ${package}'/>
			<arg line='--classpath ${src}'/>
			<arg line='--output-dir ${docs}'/>
			<arg line='--title ${ant.project.name}'/>
			<arg line='--sources'/>
			<arg line='--progress'/>
        	<arg line='--draw-diagram'/>
        	<arg line='--dot-exe ${dot_exe}'/>
		</exec>
		<copy file="${docs}/frameset.html" tofile="${docs}/index.html" overwrite="true"  failonerror="true"/>
		<copy file="${lib}/tools/doc_sekati_style.css" tofile="${docs}/style.css" overwrite="true"  failonerror="true"/>
		<copy file="${lib}/tools/doc_sekati_unnatural.css" tofile="${docs}/unnatural.css" overwrite="true"  failonerror="true"/>
	</target>

	<!-- target: clean_documentation :remove all old documentation files -->	
	<target name="clean_docs">
		<defaultexcludes echo="true"/>
		<delete includeemptydirs="true">
			<fileset dir="${docs}" includes="**/*" excludes="**/.svn"/>
		</delete>	
	</target>
	
	<!-- target: compile_all_ide :compile all fla's in src dir with Flash IDE -->	
	<target name="compile_all_ide">
	    <fdt.flashCompile>
	        <fileset dir="${src}">
	        	 <include name="*.fla"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>
	
	<!-- target: test_movie :testMovie target fla in src dir with Flash IDE -->
	<target name="test_movie">
		
	</target>
	
	<!-- target: compile_ide :compile target fla in src dir with Flash IDE -->		
	<target name="compile_ide">
	    <fdt.flashCompile>
	        <fileset dir="${src}">
	            <include name="${target_fla}"/>
	        </fileset>
	    </fdt.flashCompile>
	</target>
	
	<!-- target: compile_mtasc :compile target fla in src dir with mtasc -->			
    <target name="compile_mtasc">
        <exec executable="${mtasc}" dir="." failonerror="true">
            <arg line="-cp ${corelib}"/>
            <arg line="-cp ${classpath}"/>
            <arg line="-v -version 8 -mx -swf"/>
            <arg line="${target_swf} ${main_class}"/>
        </exec>
    </target>

	<!-- target: launch_fdt :launch target swf in FDT viewer -->			
    <target name="launch_fdt">
    	<fdt.viewDocument location="${target_swf}"/>
    </target>
	
	<!-- target: launch_external :launch target swf in FlashPlayer -->	
    <target name="launch_external">
    	<fdt.extSWFViewer.startSWF file="${target_swf}" width="${movie.width}" height="${movie.height}" flashvars="${movie.flashvars}"/>
    </target>	

	<!-- target: copy_to_dev :copy swf to dev directory -->	
	<target name="copy_to_dev">
	    <copy file="${target_swf}" tofile="S:\dev\${target_swf}" overwrite="true"  failonerror="true"/>
	</target>

	<!-- target: backup_swf :use buildnumber to backup swf file -->	
	<target name="backup_swf">
	<!-- Make backups dir if needed -->
	    <mkdir dir="backups"/>
	<!-- Increment build number -->
	    <buildnumber file="backups\build.number"/>
	<!-- Get swf file name without swf extension and store it in the base_name property -->
	    <basename file="${target_swf}" property="base_name" suffix=".swf"/>
	<!-- Copy swf to backups dir with build number -->
	    <copy file="${target_swf}" tofile="backups\${base_name}.${build.number}.swf" overwrite="false"  failonerror="true"/>
	</target>
	
</project>