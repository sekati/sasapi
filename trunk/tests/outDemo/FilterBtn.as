import com.sekati.log.Out;import mx.utils.Delegate;//class FilterBtn extends MovieClip {	private var _this:MovieClip;	private var _tf:TextField;	private var _out:Out;	private var _self:String;	private var _isFiltered:Boolean;	/**	* constructor / configurator	*/	public function FilterBtn () {	}	private function onLoad ():Void {		configUI ();	}	private function configUI ():Void {		_this = this;		_tf = _this.tf;		_out = Out.getInstance ();		_self = _this._name;		_isFiltered = false;		setText ();		_out.trace (_this,"filterBtn initialized ...");		_this.onRollOver = Delegate.create (_this, btn_onRollOver);		_this.onRollOut = Delegate.create (_this, btn_onRollOut);		_this.onPress = Delegate.create (_this, btn_onPress);		_this.onRelease = Delegate.create (_this, btn_onRelease);		_this.onReleaseOutside = Delegate.create (_this, btn_onRelease);	}	private function btn_onRollOver ():Void {		_out.info (_this,_self + ".onRollOver()");	}	private function btn_onRollOut ():Void {		_out.info (_this,_self + ".onRollOut()");	}	private function btn_onPress ():Void {		_out.info (_this,_self + ".onPress()");		toggleFilter ();		setText ();		_out.status (_this,_self + "._isFiltered = " + _isFiltered);	}	private function btn_onRelease ():Void {		_out.info (_this,_self + ".onRelease()");	}	private function toggleFilter ():Void {		_isFiltered = (_isFiltered) ? false : true;		_out.setFilter (_this,_isFiltered);	}	private function setText ():Void {		_tf.text = _self;		_tf.text += (_isFiltered) ? " (filtered)" : " (unfiltered)";	}}// eofs