/** * com.sekati.core.KeyFactory * @version 1.0.0 * @author jason m horwitz | sekati.com | tendercreative.com * Copyright (C) 2007  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package com.sekati.core {	import com.sekati.crypt.RUID;	/**	 * Give flash runtime objects a unique ID.	 * @see pixlib's HashCodeFactory	 * @see nectere's KeyInjector.	 */	public class KeyFactory {				private static var _key:String = RUID.getKey();				/**		 * Constructor Stub		 */		public function KeyFactory() {				}				/**		 * Return the RUID key injected into an object - used as both getter and setter.		 * @param o (Object) Object to inject RUID key in to		 * @return (Number) Runtime Unique ID		 */		public static function inject (o:Object):Number {			if (!o[_key]) {				o[_key] = RUID.create();				//_global["ASSetPropFlags"](o, [_key], 7, 1);				// http://www.senocular.com/flash/actionscript.php?file=ActionScript_3.0/com/senocular/display/DisplayCoil.as			}			return o[_key];			}				/**		 * Injection wrapper to provide saner syntactical getter functionality.		 */		public static function getKey(o:Object):Number {			return KeyFactory.inject(o);			}				/**		 * Returns next RUID as String to generate unique name		 * for an object.		 * @return String		 */		public static function getNextName():String {			return String(KeyFactory.previewNextKey());		}				/**		 * Preview the next object RUID to be assigned.		 * @return Number		 */		public static function previewNextKey():Number {			return RUID.getCurrentId()+1;		}				/**		 * Debugging method to check if two objects are equal.		 * @param a (Object)		 * @param b (Object)		 * @return Boolean		 */		public static function isSameObject(a:Object, b:Object):Boolean {			return KeyFactory.getKey(a) == KeyFactory.getKey(b);		}		}}