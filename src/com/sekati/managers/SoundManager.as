/** * com.sekati.managers.SoundManager * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2007  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */import com.sekati.math.MathBase;/** * centralizes & solves issues calling linked sounds from dll's or locally * extrapolated on ca.nectere.dllFactory.SoundFactory */class com.sekati.managers.SoundManager {	private static var _instance:SoundManager;	private var _holder:MovieClip;	private var _gSound:Sound;	private var _gMute:Boolean;	private var _gVolume:Number;	private var _gPan:Number;	/**	 * Singleton Accessor	 * @return SoundManager	 */	public static function getInstance ():SoundManager {		if (!_instance) {			_instance = new SoundManager ();		}		return _instance;	}	/**	 * Singleton Private Constructor	 */	private function SoundManager () {		_holder = _root.createEmptyMovieClip ("__SoundManager__", -666);		//no param means it'll affect the whole application		_gSound = new Sound ();		_gMute = false;	}	/**	 * returns the holder clip so we can load the DLL swf in	 * @return MovieClip	 */	public function getHolder ():MovieClip {		return _holder;	}	/**	 * returns the global volume setting	 * @return Number	 */	public function getVolume ():Number {		return _gVolume;	}	/**	 * sets the global volume	 * @param n (Number) 0 to 100	 * @return Void	 */	public function setVolume (n:Number):Void {		_gVolume = MathBase.constrain (n, 0, 100);		_gSound.setVolume (_gVolume);	}	/**	 * returns the global pan settings	 * @return Number	 */	public function getPan ():Number {		return _gPan;	}	/**	 * sets the global pan	 * @param n (Number) -100 to 100	 */	public function setPan (n:Number):Void {		_gPan = MathBase.constrain (n, -100, 100);		_gSound.setPan (_gPan);	}	/**	 * play a sound	 * @param linkage (String) linkage id for sound	 * @param loops (Number) number of times to play sound	 * @param msOffset (Number) miliseconds offset	 * @return Void	 */	public function play (linkage:String, loops:Number, msOffset:Number):Void {		if (loops == null) {			loops = 0;		}		if (msOffset == null) {			msOffset = 0;		}		var s:Sound = new Sound (_holder);		s.attachSound (linkage);		s.start (msOffset / 1000, loops);	}	/**	* toggle mute global application audio	* @param isMute (Boolean) optional force state	* @return Void	*/	public function mute (isMute:Boolean):Void {		if (!_gMute || isMute) {			_gSound.setVolume (0);			_gMute = true;		} else if (_gMute || !isMute) {			_gSound.setVolume (_gVolume);			_gMute = false;		}	}}// eof