/** * com.sekati.geom.Point * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2007  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */import com.sekati.math.TrigoBase;/** * create a Point object *  * {@code Usage: * var Point = new com.sekati.geom.Point(10,10); * } *///class com.sekati.geom.Point {	public var x:Number;	public var y:Number;	/**  	 * Constructor	 * @param nX (Number)	 * @param nY (Number)	 */	public function Point (nX:Number, nY:Number) {		x = nX;		y = nY;	}	/**	 * check if two points match	 * @param p (Point)	 * @return Boolean	 */	public function isEqual (p:Point):Boolean {		return (p.x == x && p.y == y);	}	/**	 * get distance between two points	 * @param p (Point)	 * @return Number	 */	public function getDistance (p:Point):Number {		return TrigoBase.getDistance (this, p);	}	/**	 * Algo to give the grid based distance when only vertical & horizontal moves are allowed	 * @param p (Point)	 * @return Number	 */	public function getAbsoluteGridDistance (p:Point):Number {		return Math.abs (x - p.x) + Math.abs (y - p.y);	}	/**	 * Algo to give the grid based distance when diagonal moves are allowed	 * by finding math.min of the differences, we're figuring out how many moves can be diagonal ones.	 * Then we can just substract that number from the normal .getAbsoluteGridDistance() method since diagonals take	 * 1 move instead of the usual 2	 * @param p (Point)	 * @return Number	 */	public function getAbsoluteGridDistanceAllowDiagonals (p:Point):Number {		var offset:Number = Math.min (Math.abs (x - p.x), Math.abs (y - p.y));		return getAbsoluteGridDistance (p) - offset;	}	/**	 * Returns a new point based on this point with x and y offset values	 * @param nX (Number)	 * @param nY (Number)	 * @return Point	 */	public function displace (nX:Number, nY:Number):Point {		return new Point (x + nX, y + nY);	}		/**	 * toString rewrite for a useful trace on the instance	 * @return String	 */	public function toString ():String {		return "Point:{x:" + x + ", y:" + y + "};";	}}